// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --preview-feature

// npx prisma init
// npx prisma generate 
// npx prisma migrate dev --name  init    ** atualizar migrate
// npx prisma migrate dev --name migrate's name    ** atualizar migrate
// npx prisma db push  
// npx prisma studio 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Users {
  id                String @id @default(cuid())

  name              String
  email             String @unique
  password          String
  role              Int // 100 = adm // 200 = technician // 300 receptionist
  
  orders            Orders[] @relation("OrdersUser")
  
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt

  @@map("users")
}

model Clients {
  id           Int @id @default(autoincrement())

  name         String
  email        String? 
  document     String? 
  number       String?
  info         String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders       Orders[]
  @@map("clients")
}

model Orders {
  id                  Int      @id @default(autoincrement())

  client              Clients? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            Int?

  user                Users? @relation("OrdersUser", fields: [userId], references: [id], onDelete: Cascade)
  userId              String?

  model               String
  year                Int?
  plateNumber         String?

  clientObservation   String?
  defectDescription   String? @db.VarChar(300)
  technicalReport     String? @db.VarChar(300)

  warranty            Boolean @default(false)
  warrantyDescription String?

  status              String @default("aguardando peça") // aberto / em andamento / finalizado / fechado

  orderProducts       OrderProducts[] @relation("order")

  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt

  @@index([clientId])
  @@index([userId])

  @@map("orders")
}

model Products {
  id              Int @id @default(autoincrement())

  name            String
  brand           String?
  type            String? // service // product
  stock           Int @default(1)
  value           Float? @default(0.00)

  orders            OrderProducts[] @relation("product")

  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  @@map("products")
}

model Brands {
  id    Int @id @default(autoincrement())

  name  String

  @@map("brands")
}

model OrderProducts {
  id                    Int @id @default(autoincrement())

  product               Products @relation("product", fields: [productId], references: [id], onDelete: Cascade)
  productId             Int

  order                 Orders @relation("order", fields: [orderId], references: [id], onDelete: Cascade)
  orderId               Int

  status                String @default("em andamento") // aguardando / aguardando peça / em andamento / sem solução / finalizado

  warranty              Boolean @default(false)
  description           String?

  value                 Float? @default(0.00)

  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("orderProducts")
}

model Vehicles {
  id  Int  @id @default(autoincrement())

  name  String //  fiat/palio 1.6 v8

  @@map("vehicles")
}

model Settings {
  id        Int  @id @default(autoincrement())

  name      String //  maxInstallments
  value     String? //  12x
  jsonValue Json? //  { 'maxInstallments' : 12, 'minInstallments': 4}

  @@map("settings")
}
